{"version":3,"sources":["components/Navbar/Navbar.js","pages/home/Home.js","pages/projects/meme-generator/images/troll-face.png","pages/projects/meme-generator/components/Header.js","pages/projects/meme-generator/components/Meme.js","pages/projects/meme-generator/MemeGenerator.js","pages/projects/bitcoin-tester/BitcoinTester.js","pages/projects/crypto-charts/CryptoCharts.js","pages/projects/mtg/components/MtgForm.js","pages/projects/mtg/Mtg.js","App.js","index.js"],"names":["Navbar","navigate","useNavigate","Menu","Item","onClick","Dropdown","text","pointing","className","DropdownHeader","DropdownDivider","DropdownItem","Home","Header","src","trollFace","Meme","React","useState","topText","bottomText","randomImage","meme","setMeme","allMemes","setAllMemes","handleChange","event","target","name","value","prevMeme","useEffect","a","fetch","res","json","data","memes","getMemes","type","placeholder","onChange","randomNumber","Math","floor","random","length","url","Image","MemeGenerator","BitcoinTester","topCoins","setTopCoins","coinPrices","setCoinPrices","coin","handleSubmit","inputs","preventDefault","console","log","getTopCoins","time","Date","now","id","prices","getPrices","dropdownOptions","map","entry","obj","symbol","toUpperCase","push","undefined","result","i","day","futureDate","getFullYear","getMonth","getDate","futureDays","moment","diff","currentPrice","change","date","Form","widths","size","onSubmit","Select","label","options","Input","fluid","Button","ResponsiveContainer","height","LineChart","margin","top","right","left","bottom","XAxis","dataKey","tickFormatter","timeStr","format","domain","scale","YAxis","Label","position","angle","Line","dot","Tooltip","formatter","toFixed","labelFormatter","cursor","CryptoCharts","yScale","setYScale","setCoin","yearTicks","price","slice","topCoin","ticks","offset","stroke","Segment","Dimmer","active","Loader","MtgForm","cmc","whiteCheck","blackCheck","blueCheck","greenCheck","redCheck","andor","setInputs","e","handleCheck","checked","Box","FormControl","sx","flexDirection","FormControlLabel","control","Checkbox","TextField","select","MenuItem","variant","color","Mtg","cards","setCards","input","colors","colorString","join","lookup","lookupString","getScryfallCards","ImageList","cols","card","image_uris","normal","ImageListItem","App","exact","path","element","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.2de9fa4a.chunk.js","sourcesContent":["import React from 'react'\nimport { useNavigate } from \"react-router-dom\";\nimport { Menu, Dropdown, DropdownHeader, DropdownDivider, DropdownItem } from \"semantic-ui-react\"\n\nexport default function Navbar () {\n  const navigate = useNavigate();\n\n  return (\n    <Menu>\n      <Menu.Item onClick={ () =>\n        navigate('/')\n      }>\n        Home\n      </Menu.Item>\n      <Dropdown text='Projects' pointing className='link item'>\n        <Dropdown.Menu>\n          <DropdownHeader>Scrimba</DropdownHeader>\n          <Dropdown.Item onClick={ () =>\n            navigate(`/projects/meme-generator`)\n          }>\n            Meme Generator\n          </Dropdown.Item>\n          <DropdownDivider />\n          <DropdownHeader>Crypto</DropdownHeader>\n          <Dropdown.Item onClick={ () =>\n            navigate('/projects/bitcoin-tester')\n          }>\n            Bitcoin Tester\n          </Dropdown.Item>\n          <Dropdown.Item onClick={ () =>\n            navigate('/projects/crypto-charts')\n          }>\n            Charts\n          </Dropdown.Item>\n          <DropdownDivider />\n          <DropdownHeader>MTG</DropdownHeader>\n          <DropdownItem onClick={ () =>\n            navigate('/projects/mtg')\n          }>\n            MTG Card Lookup\n          </DropdownItem>\n        </Dropdown.Menu>\n      </Dropdown>\n    </Menu>\n  )\n}","import React from \"react\"\nimport Navbar from \"../../components/Navbar/Navbar\"\n\nexport default function Home() {\n  return(\n    <div>\n      <h1>Welcome to blakeacarlson.com!</h1>\n      <h3>This website is under development</h3>\n    </div>\n  )\n}\n","export default __webpack_public_path__ + \"static/media/troll-face.ef4deb6e.png\";","import React from \"react\"\nimport trollFace from \"../images/troll-face.png\"\n\nexport default function Header() {\n    return (\n        <header className=\"meme--header\">\n            <img \n                src={trollFace} \n                className=\"meme--header--image\"\n            />\n            <h2 className=\"meme--header--title\">Meme Generator</h2>\n            <h4 className=\"meme--header--project\">React Course - Project 3</h4>\n        </header>\n    )\n}","import React from \"react\"\nimport { Image } from \"semantic-ui-react\"\n\nexport default function Meme() {\n    \n    const [meme, setMeme] = React.useState({\n        topText: \"\",\n        bottomText: \"\",\n        randomImage: \"http://i.imgflip.com/1bij.jpg\" \n    })\n    const [allMemes, setAllMemes] = React.useState([])\n    \n    React.useEffect(() => {\n        async function getMemes() {\n            const res = await fetch(\"https://api.imgflip.com/get_memes\")\n            const data = await res.json()\n            setAllMemes(data.data.memes)\n        }\n        getMemes()\n    }, [])\n    \n    function getMemeImage() {\n        const randomNumber = Math.floor(Math.random() * allMemes.length)\n        const url = allMemes[randomNumber].url\n        setMeme(prevMeme => ({\n            ...prevMeme,\n            randomImage: url\n        }))\n        \n    }\n    \n    function handleChange(event) {\n        const {name, value} = event.target\n        setMeme(prevMeme => ({\n            ...prevMeme,\n            [name]: value\n        }))\n    }\n    \n    return (\n        <main>\n            <div className=\"form\">\n                <input \n                    type=\"text\"\n                    placeholder=\"Top text\"\n                    className=\"form--input\"\n                    name=\"topText\"\n                    value={meme.topText}\n                    onChange={handleChange}\n                />\n                <input \n                    type=\"text\"\n                    placeholder=\"Bottom text\"\n                    className=\"form--input\"\n                    name=\"bottomText\"\n                    value={meme.bottomText}\n                    onChange={handleChange}\n                />\n                <button \n                    className=\"form--button\"\n                    onClick={getMemeImage}\n                >\n                    Get a new meme image 🖼\n                </button>\n            </div>\n            <div className=\"meme\">\n                <Image src={meme.randomImage} className=\"meme--image\"/>\n                <h2 className=\"meme--text top\">{meme.topText}</h2>\n                <h2 className=\"meme--text bottom\">{meme.bottomText}</h2>\n            </div>\n        </main>\n    )\n}","import React from 'react'\nimport Header from './components/Header'\nimport Meme from './components/Meme'\nimport './style.css'\n\nexport default function MemeGenerator() {\n  return(\n    <div>\n      <Header />\n      <Meme />\n    </div>\n  )\n}","import React, { useState } from 'react'\nimport { DropdownMenu, Dropdown, Form } from 'semantic-ui-react';\nimport 'semantic-ui-css/semantic.min.css';\nimport { LineChart, ResponsiveContainer, XAxis, Label, Line, Tooltip, YAxis } from 'recharts';\nimport moment from 'moment';\nimport continuousColorLegend from 'react-vis/dist/legends/continuous-color-legend';\n\nexport default function BitcoinTester() {\n  const [topCoins, setTopCoins] = React.useState([])\n  const [coinPrices, setCoinPrices] = React.useState([])\n  const [coin, setCoin] = React.useState([])\n  const [inputs, setInputs] = useState([])\n\n  React.useEffect(() => {\n    async function getTopCoins () {\n      const res = await fetch('https://api.coingecko.com/api/v3/coins/markets?vs_currency=usd&order=market_cap_desc')\n      const data = await res.json()\n\n      setTopCoins(data)\n    }\n\n    getTopCoins()\n  }, [])\n\n  React.useEffect(() => {\n    async function getPrices () {\n      const time = Math.floor(Date.now() / 1000)\n\n      const res = await fetch(`https://api.coingecko.com/api/v3/coins/${coin.id}/market_chart/range/?vs_currency=usd&from=946733027&to=${time}`)\n      const data = await res.json()\n\n      setCoinPrices(data.prices)\n    }\n\n    getPrices()\n  }, [coin])\n\n  function handleSubmit(inputs) {\n    inputs.preventDefault();\n    console.log(inputs.coin)\n  }\n\n  let dropdownOptions = []\n    \n    topCoins.map(entry => {\n      let obj = {text: entry.symbol.toUpperCase(), value: entry.symbol}\n      dropdownOptions.push(obj)\n    })\n\n  if (coinPrices !== undefined && coin.symbol !== undefined) {\n    let result = [];\n    let NUM_YEARS = 1;\n    for(let i = 0; i < coinPrices.length; i++) {\n      let day = new Date(coinPrices[i][0])\n      let futureDate = new Date(day.getFullYear() + NUM_YEARS, day.getMonth(), day.getDate())\n      let diffDays = moment(futureDate).diff(day, \"days\")\n      let futureDays = i + diffDays\n      let currentPrice = coinPrices[i][1]\n\n      if( futureDays < coinPrices.length) {\n        let futurePrice = coinPrices[futureDays][1]\n        let change = ((futurePrice / currentPrice) - 1) * 100\n\n\n        let obj = { date: coinPrices[i][0], change: change}\n        result.push(obj)\n      }\n      // if (futureDate.getMonth() === 1 && futureDate.getDate() === 29) {\n      //   console.log(`day = ${day}, futureDate=${futureDate}`)\n      // }\n    }\n\n    let yScale = 'linear'\n\n    return (\n      <div>\n        <Form widths='equal' size='small' onSubmit={handleSubmit}>\n            <Form.Select\n              label='Coin to HODL?'\n              id='coin'\n              options={dropdownOptions}\n              placeholder=''\n            />\n            <Form.Input fluid label='How many years to HODL?' placeholder='1' id='time'/>\n          <Form.Button>Submit</Form.Button>\n        </Form>\n        <ResponsiveContainer height={ 600 }>\n            <LineChart\n              data={ result }\n              margin={ { top: 50, right: 80, left: 80, bottom: 50 } }\n            >\n            <XAxis\n                dataKey=\"date\"\n                type=\"number\"\n                tickFormatter={ timeStr => moment(timeStr).format('MM/DD/YYYY') }\n                domain={ ['auto', 'auto'] }\n                scale={ 'time' }\n              ></XAxis>\n            <YAxis\n                scale={ yScale === 'linear' ? 'linear' : 'log' }\n                domain={ ['auto', 'auto'] }\n              >\n                <Label value=\"Percentage Change\" position=\"left\" angle={ -90 } />\n              </YAxis>\n            <Line dataKey=\"change\" dot={false}/>\n            <Tooltip\n                formatter={ (value) => `${value.toFixed(2)}%` }\n                labelFormatter={ timeStr => moment(timeStr).format('MM/DD/YYYY') }\n                cursor={ true }\n              />\n          </LineChart>\n        </ResponsiveContainer>\n      </div>\n    )\n  }\n  else {\n    return (\n      <div>\n        <Form widths='equal' size='small' onSubmit={handleSubmit}>\n            <Form.Select\n              label='Coin to HODL?'\n              options={dropdownOptions}\n              placeholder=''\n            />\n            <Form.Input fluid label='How many years to HODL?' placeholder='1' />\n          <Form.Button>Submit</Form.Button>\n        </Form>\n      </div>\n    )\n  }\n}","import React from 'react'\nimport { LineChart, Line, XAxis, YAxis, Tooltip, ResponsiveContainer, Label } from 'recharts';\nimport moment from 'moment'\nimport { Dropdown, Loader, Segment, Dimmer } from 'semantic-ui-react'\n\nexport default function CryptoCharts () {\n\n  const [coinPrices, setCoinPrices] = React.useState([])\n  const [yScale, setYScale] = React.useState('linear')\n  const [coin, setCoin] = React.useState([])\n  const [topCoins, setTopCoins] = React.useState([])\n\n  React.useEffect(() => {\n    async function getTopCoins () {\n      const res = await fetch('https://api.coingecko.com/api/v3/coins/markets?vs_currency=usd&order=market_cap_desc')\n      const data = await res.json()\n\n      setTopCoins(data)\n      setCoin(data[0])\n    }\n\n    getTopCoins()\n  }, [])\n\n  React.useEffect(() => {\n    async function getPrices () {\n      const time = Math.floor(Date.now() / 1000)\n\n      const res = await fetch(`https://api.coingecko.com/api/v3/coins/${coin.id}/market_chart/range/?vs_currency=usd&from=946733027&to=${time}`)\n      const data = await res.json()\n\n      setCoinPrices(data.prices)\n    }\n\n    if (coin.symbol !== undefined) {\n      getPrices()\n    }\n  }, [coin])\n\n  if (coinPrices !== undefined && coin.symbol !== undefined) {\n    let result = [];\n    let yearTicks = []\n    coinPrices.map(entry => {\n      let day = new Date(entry[0])\n\n      if (day.getDate() === 1 && day.getMonth() === 0) {\n        yearTicks.push(day)\n      }\n      let obj = { date: entry[0], price: entry[1] }\n      result.push(obj)\n    })\n\n    return (\n      <div>\n        <Dropdown text={ coin.symbol.toUpperCase() } pointing className='link item'>\n          <Dropdown.Menu>\n            { topCoins.slice(0, 20).map(topCoin => (\n              <Dropdown.Item onClick={ () => setCoin(topCoin) }>{ topCoin.symbol.toUpperCase() }</Dropdown.Item>\n            )) }\n          </Dropdown.Menu>\n        </Dropdown>\n        <Dropdown text={ yScale === 'linear' ? 'Linear' : 'Log' } pointing className='link item'>\n          <Dropdown.Menu>\n            <Dropdown.Item onClick={ () => setYScale('linear') }>Linear</Dropdown.Item>\n            <Dropdown.Item onClick={ () => setYScale('log') }>Log</Dropdown.Item>\n          </Dropdown.Menu>\n        </Dropdown>\n        <ResponsiveContainer height={ 600 }>\n          <LineChart\n            data={ result }\n            margin={ { top: 50, right: 80, left: 80, bottom: 50 } }\n          >\n            <XAxis\n              dataKey=\"date\"\n              type=\"number\"\n              ticks={ yearTicks }\n              tickFormatter={ timeStr => moment(timeStr).format('YYYY') }\n              domain={ ['auto', 'auto'] }\n              scale={ 'time' }\n            >\n              <Label value=\"Date\" offset={ 0 } position=\"bottom\" />\n            </XAxis>\n            <YAxis\n              scale={ yScale === 'linear' ? 'linear' : 'log' }\n              domain={ ['auto', 'auto'] }\n            >\n              <Label value=\"Price (USD)\" position=\"left\" angle={ -90 } />\n            </YAxis>\n            <Line\n              dataKey=\"price\"\n              stroke=\"#8884d8\"\n              dot={ false }\n            />\n            <Tooltip\n              formatter={ (value) => `$${value.toFixed(2)}` }\n              labelFormatter={ timeStr => moment(timeStr).format('MM/DD/YYYY') }\n              cursor={ true }\n            />\n          </LineChart>\n        </ResponsiveContainer>\n      </div>\n    )\n  } else {\n    return (\n      <Segment>\n        <Dimmer active>\n          <Loader />\n        </Dimmer>\n      </Segment>\n    )\n  }\n}","import { Button, Checkbox, FormControl, FormControlLabel, FormLabel, Grid, InputLabel, MenuItem, Select, TextField } from '@mui/material'\nimport { Box } from '@mui/system'\nimport React from 'react'\n\nconst MtgForm = ({ handleSubmit }) => {\n  const [inputs, setInputs] = React.useState({ \n    cmc: null,\n    whiteCheck: false,\n    blackCheck: false,\n    blueCheck: false,\n    greenCheck: false,\n    redCheck: false,\n    andor: 'and'\n  })\n\n  const handleChange = (e) => {\n    const { name, value } = e.target;\n    setInputs({\n      ...inputs,\n      [name]: value,\n    });\n\n    console.log(`name: ${name} value: ${value}`)\n  }\n\n  const handleCheck = (e) => {\n    const { name, checked } = e.target;\n    setInputs({\n      ...inputs,\n      [name]: checked,\n    });\n\n    console.log(`name: ${name} value: ${checked}`)\n  }\n\n  return (\n    <form onSubmit={ (e) => {\n      handleSubmit(e, inputs) \n    }}>\n      <Box>\n        <FormControl sx={ { flexDirection: \"row\" } }>\n          <FormControlLabel control={ <Checkbox name='whiteCheck' checked={inputs.whiteCheck} onChange={handleCheck}/> } label=\"White\" />\n          <FormControlLabel control={ <Checkbox name='blackCheck' checked={inputs.blackCheck} onChange={handleCheck}/> } label=\"Black\" />\n          <FormControlLabel control={ <Checkbox name='greenCheck' checked={inputs.greenCheck} onChange={handleCheck}/> } label=\"Green\" />\n          <FormControlLabel control={ <Checkbox name='redCheck' checked={inputs.redCheck} onChange={handleCheck}/> } label=\"Red\" />\n          <FormControlLabel control={ <Checkbox name='blueCheck' checked={inputs.blueCheck} onChange={handleCheck}/> } label=\"Blue\" />\n          <TextField \n            value={inputs.andor}\n            onChange={handleChange}\n            select // tell TextField to render select\n            label=\"AND/OR\"\n            name=\"andor\"\n          >\n            <MenuItem value={'and'}>AND</MenuItem>\n            <MenuItem value={'or'}>OR</MenuItem>\n          </TextField>\n        </FormControl>\n      </Box>\n      <Box>\n        <FormControl>\n          <TextField\n            name=\"cmc\"\n            type=\"text\"\n            label=\"CMC\"\n            onChange={ handleChange }\n          />\n        </FormControl>\n      </Box>\n      <Button variant=\"contained\" color=\"primary\" type=\"submit\">\n        Submit\n      </Button>\n\n    </form>\n  )\n}\n\nexport default MtgForm\n\n{/* <Form onSubmit={handleSubmit}>\n          <Form.Input label='Color' placeholder='Red' name='color' onChange={handleChange}/>\n          <Form.Input label='CMC' placeholder='1' name='cmc' onChange={handleChange}/>\n        <Form.Button>SUBMIT</Form.Button>\n      </Form> */}","import React from 'react'\nimport MtgForm from './components/MtgForm'\nimport { ImageList, ImageListItem } from '@mui/material'\n\n\nconst Mtg = () => {\n  const [inputs, setInputs] = React.useState([])\n  const [cards, setCards] = React.useState([])\n\n  const handleChange = (e) => {\n    const { name, value } = e.target;\n    setInputs({\n      ...inputs,\n      [name]: value,\n    });\n  };\n  \n  const handleSubmit = (input) => {\n    async function getScryfallCards () {\n      let colors=[]\n      if (input.whiteCheck) {\n        colors.push('w')\n      }\n      if (input.blackCheck) {\n        colors.push('b')\n      }\n      if (input.greenCheck) {\n        colors.push('g')\n      }\n      if (input.redCheck) {\n        colors.push('r')\n      }\n      if (input.blueCheck) {\n        colors.push('u')\n      }\n\n      let colorString = ''\n\n      colorString = colors.join('')\n\n      let lookup = []\n\n      if (colorString !== '') {\n        if (input.andor === 'and') {\n          lookup.push(`c%3D${colorString}`)\n        } else {\n          lookup.push(`c%3C%3D${colorString}`)\n        }\n      }\n\n      if(input.cmc) {\n        lookup.push(`cmc%3D${input.cmc}`)\n      }\n\n      let lookupString = lookup.join('+')\n\n      if (lookupString !== '') {\n        try {\n          const res = await fetch(`https://api.scryfall.com/cards/search?q=${lookupString}`)\n          const data = await res.json()\n\n          setCards(data.data)\n        }\n        catch (error) {\n          console.log(`error: ${error}`)\n        }\n      }\n      else {\n        console.log('error')\n      }\n    }\n\n    async function getCards () {\n      let colors=[]\n      if (input.whiteCheck) {\n        colors.push('white')\n      }\n      if (input.blackCheck) {\n        colors.push('black')\n      }\n      if (input.greenCheck) {\n        colors.push('green')\n      }\n      if (input.redCheck) {\n        colors.push('red')\n      }\n      if (input.blueCheck) {\n        colors.push('blue')\n      }\n\n      let colorString = ''\n\n      if (input.andor === 'and') {\n        colorString = colors.join(',')\n      } else {\n        colorString = colors.join('|')\n      }\n\n      let lookup = []\n\n      if (colorString !== '') {\n        lookup.push(`colors=${colorString}`)\n      }\n\n      if(input.cmc) {\n        lookup.push(`cmc=${input.cmc}`)\n      }\n\n      let lookupString = lookup.join('+')\n\n      console.log(`lookupString: ${lookupString}`)\n\n      if (lookupString !== '') {\n        try {\n          const res = await fetch(`https://api.magicthegathering.io/v1/cards?${lookupString}`)\n          // const res = await fetch(`https://api.scryfall.com/cards/search?${lookupString}`)\n          const data = await res.json()\n\n          setCards(data.cards)\n        }\n        catch (error) {\n          console.log(`error: ${error}`)\n        }\n      }\n      else {\n        console.log('error')\n      }\n    }\n    getScryfallCards()\n  }\n\n  if (cards && cards.length > 0) {\n    return(\n      <div>\n        <MtgForm handleSubmit={(e, input) => {\n          e.preventDefault()\n          handleSubmit(input)\n        }}/>\n        <div>\n          <ImageList cols={8}>\n          {cards.map(card => (\n            card?.image_uris?.normal ?\n                <ImageListItem>\n                  <img\n                    src={card?.image_uris?.normal}\n                  />\n                </ImageListItem> :\n                null\n            ))}\n          </ImageList>\n        </div> \n      </div>\n    )\n  }\n  else {\n    return(\n      <div>\n        <MtgForm handleSubmit={(e, input) => {\n          e.preventDefault()\n          handleSubmit(input)\n        }}/>\n        </div>)\n  }\n}\nexport default Mtg\n\n{/* <ImageList cols={8}>\n            {cards.map(card => (\n              card['image_uris']['normal'] ?\n                <ImageListItem>\n                  <img\n                    src={card['image_uris']['normal']}\n                  />\n                </ImageListItem> :\n                null\n            ))}\n            </ImageList> */}\n","import React from \"react\"\nimport Home from \"./pages/home/Home.js\"\nimport MemeGenerator from \"./pages/projects/meme-generator/MemeGenerator\"\nimport BitcoinTester from \"./pages/projects/bitcoin-tester/BitcoinTester\";\nimport CryptoCharts from \"./pages/projects/crypto-charts/CryptoCharts\"\nimport Mtg from \"./pages/projects/mtg/Mtg\"\nimport Navbar from \"./components/Navbar/Navbar\"\nimport { HashRouter as Router, Route, Routes } from \"react-router-dom\";\nimport 'semantic-ui-css/semantic.min.css';\n\n\nexport default function App() {\n  return (\n    <div>\n      <Router>\n        <Navbar />\n        <Routes>\n          <Route exact path=\"/\" element={<Home />}/>\n          <Route exact path=\"/projects/meme-generator\" element={<MemeGenerator />}/>\n          <Route exact path=\"/projects/bitcoin-tester\" element={<BitcoinTester />}/>\n          <Route exact path=\"/projects/crypto-charts\" element={<CryptoCharts />}/>\n          <Route exact path=\"/projects/mtg\" element={<Mtg />}/>\n        </Routes>\n      </Router>\n    </div>\n  )\n}","import React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport App from \"./App\"\n\nReactDOM.render(<App />, document.getElementById(\"root\"))"],"sourceRoot":""}